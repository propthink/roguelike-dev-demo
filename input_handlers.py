# import dependencies
from __future__ import annotations

from typing import Optional, TYPE_CHECKING
import tcod.event
from actions import Action, EscapeAction, BumpAction  # type: ignore

if TYPE_CHECKING:
    from engine import Engine

# used to dispatch events to specific methods
class EventHandler( tcod.event.EventDispatch[ Action ] ):

    def __init__( self, engine: Engine ):

        self.engine = engine

    # handle events generated by the user
    def handle_events( self ) -> None:

        # event queue
        for event in tcod.event.wait():

            # initialize the action with the event generated by the user
            action = self.dispatch( event )

            if action is None:

                continue

            # execute the action
            action.perform()

            # handle enemy turns
            self.engine.handle_enemy_turns()

            # update the fov before the player's next action
            self.engine.update_fov()

    # exit on user request
    def ev_quit( self, event: tcod.event.Quit ) -> Optional[ Action ]:

        raise SystemExit()
    
    # return the appropriate Action object based on event input
    def ev_keydown( self, event: tcod.event.KeyDown ) -> Optional[ Action ]:

        # initialize Action object
        action: Optional[ Action ] = None

        # capture key press
        key = event.sym

        # grab the player from the engine
        player = self.engine.player

        # user presses up
        if key == tcod.event.KeySym.UP:

            action = BumpAction( player, dx=0, dy=-1 )

        # user presses down
        elif key == tcod.event.KeySym.DOWN:

            action = BumpAction( player, dx=0, dy=1 )

        # user presses left
        elif key == tcod.event.KeySym.LEFT:

            action = BumpAction( player, dx=-1, dy=0 )

        # user presses right
        elif key == tcod.event.KeySym.RIGHT:

            action = BumpAction( player, dx=1, dy=0 )

        # user presses escape
        elif key == tcod.event.KeySym.ESCAPE:

            action = EscapeAction( player )

        # return Action object, or none if no relevant key press was detected
        return action