# import dependencies
from typing import Set, Iterable, Any

from tcod.context import Context
from tcod.console import Console
from tcod.map import compute_fov

from entity import Entity
from game_map import GameMap # type: ignore
from input_handlers import EventHandler

# manages the current state of the game
class Engine:

    # initialize engine with a set of entities, an event handler, and the player entity
    def __init__( self, entities: Set[ Entity ], event_handler: EventHandler, game_map: GameMap, player: Entity ):

        self.entities = entities
        self.event_handler = event_handler
        self.game_map = game_map
        self.player = player
        self.update_fov()

    # handle events generated by the user
    def handle_events( self, events: Iterable[ Any ] ) -> None:

        # event loop
        for event in events:

            # initialize action with event handler
            action = self.event_handler.dispatch( event )

             # if no action is detected, continue
            if action is None:

                continue

            # execute action
            action.perform( self, self.player )

            # update the FOV before the player's next action
            self.update_fov()

    # recompute the visible area based on the player's point of view
    def update_fov( self ) -> None:

        self.game_map.visible[:] = compute_fov(

            self.game_map.tiles[ "transparent" ],
            ( self.player.x, self.player.y ),
            radius =8
        )
        # if a tile is "visible" it should be added to "explored"
        self.game_map.explored |= self.game_map.visible
            
    # render the current frame to the screen
    def render( self, console: Console, context: Context ) -> None:

        # render the game map
        self.game_map.render( console )

        # step through each entity
        for entity in self.entities:

            # only draw entities that are in the FOV
            if self.game_map.visible[ entity.x, entity.y ]:

                console.print( entity.x, entity.y, entity.char, fg=entity.color )

        # present context
        context.present( console )

        # clear console
        console.clear()